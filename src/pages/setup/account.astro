---
// Only check setup token - middleware handles the rest
const setupToken = Astro.cookies.get("setup_token")?.value;
const adminToken = import.meta.env.ADMIN_TOKEN;

console.log("[Account] Setup token:", setupToken ? "present" : "missing");
console.log("[Account] Admin token:", adminToken ? "present" : "missing");

if (!setupToken || !adminToken || setupToken !== adminToken) {
    console.log("[Account] Invalid token, redirecting to setup");
    return Astro.redirect("/setup/token");
}

console.log("[Account] Token valid, showing form");
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Admin Account - Dokkubase</title>
    <style>
        /* Basic styles - replace with Preline later */
        body {
            font-family: system-ui, sans-serif;
            max-width: 500px;
            margin: 40px auto;
            padding: 20px;
        }
        .error { 
            color: red;
            margin: 10px 0;
            display: none;
            padding: 10px;
            background: #fee;
            border: 1px solid #fcc;
            border-radius: 4px;
        }
        .error ul {
            margin: 5px 0;
            padding-left: 20px;
        }
        input {
            width: 100%;
            padding: 8px;
            margin: 10px 0;
        }
        button {
            width: 100%;
            padding: 10px;
            background: #000;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .requirements {
            font-size: 0.9em;
            color: #666;
            margin: 5px 0 15px;
        }
    </style>
</head>
<body>
    <h1>Create Admin Account</h1>
    <p>Set up your admin account to start using Dokkubase.</p>

    <form id="setup-form">
        <div id="error" class="error"></div>
        
        <div class="field">
            <label for="email">Admin Email</label>
            <input 
                type="email" 
                id="email" 
                name="email" 
                required 
                placeholder="admin@your-domain.com"
            />
            <div class="requirements">
                Must be a valid email address
            </div>
        </div>
        
        <div class="field">
            <label for="password">Password</label>
            <input 
                type="password" 
                id="password" 
                name="password" 
                required 
                placeholder="Secure password"
                minlength="12"
            />
            <div class="requirements">
                Must be at least 12 characters and contain:
                <ul>
                    <li>One uppercase letter</li>
                    <li>One lowercase letter</li>
                    <li>One number</li>
                    <li>One special character</li>
                </ul>
            </div>
        </div>

        <button type="submit" id="submit">
            Create Admin Account
        </button>
    </form>

    <script>
        // Safe error formatting without external deps
        function safeFormatErrors(errors: string[] | undefined | null): string {
            if (!Array.isArray(errors) || errors.length === 0) {
                return "An error occurred";
            }

            const escaped = errors.map(e => {
                if (typeof e !== 'string') return '';
                return e
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#039;');
            }).filter(Boolean);

            if (escaped.length === 0) {
                return "An error occurred";
            }

            return `<strong>Validation errors:</strong><ul>${
                escaped.map(e => `<li>${e}</li>`).join('')
            }</ul>`;
        }

        const form = document.getElementById("setup-form") as HTMLFormElement;
        const error = document.getElementById("error") as HTMLDivElement;
        const submit = form.querySelector("button") as HTMLButtonElement;

        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            
            // Reset state
            error.style.display = "none";
            submit.disabled = true;
            submit.textContent = "Creating account...";

            try {
                const res = await fetch("/api/setup/create-admin", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        email: form.email.value,
                        password: form.password.value
                    })
                });

                const data = await res.json();

                if (!res.ok) {
                    if (data.details) {
                        const messages = data.details.map((d: any) => d.message);
                        error.innerHTML = safeFormatErrors(messages);
                    } else {
                        error.textContent = data.error || "Failed to create account";
                    }
                    throw new Error("Validation failed");
                }

                // Redirect to dashboard on success
                window.location.href = "/";

            } catch (err) {
                error.style.display = "block";
                submit.disabled = false;
                submit.textContent = "Create Admin Account";
            }
        });
    </script>
</body>
</html>
